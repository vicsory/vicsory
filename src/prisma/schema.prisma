generator client {
    provider        = "prisma-client-js"
    // previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    // directUrl         = env("DIRECT_DATABASE_URL")
}

enum USER_CATEGORY {
    NONE         // Default or uncategorized users
    MUSIC        // Musicians, bands, or music enthusiasts
    COMEDY       // Comedians or humor-focused creators
    CELEBRITY    // Public figures or famous personalities
    GAMER        // Gaming enthusiasts or streamers
    FILM         // Filmmakers, actors, or cinema lovers
    INFLUENCER   // Social media influencers across niches
    FREELANCER   // Independent professionals or gig workers
    COMPANY      // Business or corporate accounts
    MEDIA        // News outlets, journalists, or media personalities
    TECH         // Technology experts, developers, or innovators
    SPORTS       // Athletes, sports fans, or commentators
    ARTIST       // Visual artists, illustrators, or designers
    WRITER       // Authors, bloggers, or literary creators
    FOOD         // Chefs, food bloggers, or culinary enthusiasts
    TRAVEL       // Travel bloggers, explorers, or tourism accounts
    FASHION      // Fashion influencers, designers, or brands
    POLITICS     // Political commentators, activists, or analysts
    EDUCATION    // Educators, academics, or learning advocates
    HEALTH       // Fitness experts, wellness gurus, or health professionals
    INVESTOR     // Investors, financial analysts, or market enthusiasts
    SCIENTIST    // Researchers, scientists, or science communicators
    ACTIVIST     // Advocates for social, environmental, or other causes
    PHOTOGRAPHER // Professional or hobbyist photographers
    PODCASTER    // Podcast hosts or audio content creators
    CRYPTO       // Cryptocurrency enthusiasts, traders, or blockchain advocates
    ENTREPRENEUR // Startup founders, business innovators, or self-starters
    PARENTING    // Parents, family bloggers, or childcare experts
    DIY          // Do-it-yourself creators, crafters, or home improvement fans
    GAMING_DEV   // Game developers or designers (distinct from GAMER)
    HISTORY      // Historians, history buffs, or educators
    NATURE       // Environmentalists, wildlife lovers, or outdoor enthusiasts
    AUTOMOTIVE   // Car enthusiasts, mechanics, or auto industry folks
    SPIRITUAL    // Spiritual leaders, mindfulness advocates, or religious figures
    MARKETING    // Marketers, advertisers, or branding experts
    LEGAL        // Lawyers, legal commentators, or law enthusiasts
    ANIMAL       // Pet owners, animal rescuers, or wildlife advocates
    BEAUTY       // Makeup artists, beauty bloggers, or cosmetic enthusiasts
    REAL_ESTATE  // Realtors, property investors, or housing experts
    EVENT_PLANNER// Event organizers, wedding planners, or party hosts
    CHARITY      // Nonprofit organizers, philanthropists, or fundraisers
    ARCHITECTURE // Architects, designers, or building enthusiasts
    MEMES        // Meme creators or humor curators
    SPACE        // Space enthusiasts, astronomers, or cosmic explorers
    VLOGGER      // Video bloggers or YouTube-style content creators
    STUDENT      // Students, learners, or campus influencers
    RETAIL       // Shop owners, e-commerce sellers, or product promoters
    OTHER        // Catch-all for niche or undefined categories
}

model User {
    id               String         @id @default(uuid())
    name             String?        @db.VarChar(50)
    description      String?        @db.VarChar(160)
    category         USER_CATEGORY  @default(NONE)
    location         String?        @db.VarChar(30)
    website          String?        @db.VarChar(30)
    whatsapp         String?        @db.VarChar(15)
    jobTitle         String?        @db.VarChar(30)
    photoUrl         String?
    headerUrl        String?
    username         String         @unique @db.VarChar(20)
    password         String
    isPremium        Boolean        @default(false)
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @default(now()) @updatedAt
    createdPosts    Post[]        @relation("userPosts")
    reposts         Post[]        @relation("userReposts")
    likedPosts      Post[]        @relation("userLikes")
    following        User[]         @relation("userFollows")
    followers        User[]         @relation("userFollows")
    sentMessages     Message[]      @relation("userMessagesSent")
    receivedMessages Message[]      @relation("userMessagesRecieved")
    notifications    Notification[]
    stories          Story[]
}

model Story {
    id        Int      @id @default(autoincrement())
    img       String
    userId    String
    createdAt DateTime @default(now())
    expiresAt DateTime
    user      User     @relation(fields: [userId], references: [id])
}

model Post {
    id          String   @id @default(uuid())
    text        String   @db.VarChar(280)
    createdAt   DateTime @default(now())
    author      User     @relation("userPosts", fields: [authorId], references: [id])
    authorId    String
    photoUrl    String?
    likedBy     User[]   @relation("userLikes")
    repostedBy User[]   @relation("userReposts")
    replies     Post[]  @relation("postReplies")
    reposts    Post[]  @relation("repostOf")
    isRepost   Boolean  @default(false)
    repostOf   Post?   @relation("repostOf", fields: [repostOfId], references: [id], onDelete: Cascade)
    repostOfId String?
    isReply     Boolean  @default(false)
    repliedTo   Post?   @relation("postReplies", fields: [repliedToId], references: [id], onDelete: Cascade)
    repliedToId String?
}

model Message {
    id          String   @id @default(uuid())
    text        String   @db.VarChar(280)
    createdAt   DateTime @default(now())
    sender      User     @relation("userMessagesSent", fields: [senderId], references: [id])
    senderId    String
    recipient   User     @relation("userMessagesRecieved", fields: [recipientId], references: [id])
    recipientId String
    photoUrl    String?
}

model Notification {
    id        String   @id @default(uuid())
    type      String   @db.VarChar(20)
    content   String
    createdAt DateTime @default(now())
    isRead    Boolean  @default(false)
    user      User     @relation(fields: [userId], references: [id])
    userId    String
}
